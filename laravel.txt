php artisan --version
Laravel Framework 6.7.0

Add new host name
vagrant reload --provision

vagrant SSH
cd projects
laravel new project_name --auth
exit
npm i
npm run watch

NAME APP
.env
APP_NAME='Art Gallery'
APP_URL=art_gallery.test

CONFIGURE DATABASE
DB_CONNECTION=mysql
DB_HOST=localhost ************
DB_PORT=33060
DB_DATABASE=art_gallery
DB_USERNAME=homestead
DB_PASSWORD=secret

vagrant shh
cd projects/art_gallery
php artisan migrate

INSTALL MATERIALIZE
exit SSH
npm i materialize-css@next

resources/sass/app.scss
@import "node_modules/materialize-css/sass/materialize";

resources/js/app.js
require('materialize-css');
import M from "materialize-css";

COMPILE RESOURCES
npm run watch

views/layouts/app.blade.php
<link href="{{ asset('css/app.css') }}" rel="stylesheet">
<script src="{{ asset('js/app.js') }}"></script>

App\Http\Middleware\RedirectIfAuthenticated you can 
specify where authenticated users are redirected to. The default is /home

https://stefanbauer.me/articles/how-to-modify-the-logout-redirect-path
LoginController
use Illuminate\Http\Request;
use AuthenticatesUsers {
    logout as logout_alias;
}

public function logout(Request $request) {
    $this->logout_alias($request);
    return redirect()->route('login');
}

app/Providers/RouteServiceProvider.php
public const HOME = '/home';

CREATE CONTROLLER WITH RESOURCE METHODS
php artisan make:controller PostsController --resource
import model objects into controller at top of file

REGISTER ROUTES 
routes/web.php
Route::resource('artists', 'ArtistsController')->middleware('auth');

LIST ROUTES
php artisan route:list

CREATE MODEL WITH MIGRATION
php artisan make:model Post -m
Define model attributes inside the migration file
Schema::create('works', function (Blueprint $table) {
    $table->bigIncrements('id');
    $table->unsignedBigInteger('artist_id');
    $table->foreign('artist_id')->references('id')->on('artists');
    $table->string('title');
    $table->string('artist');
    $table->string('year');
    $table->string('location');
    $table->timestamps();
});

DEFINE MODEL RELATIONSHIPS
class Artist extends Model
{
    public function works() {
        return $this->hasMany('App\Work');
    }
}

class Work extends Model
{
    public function user() {
        return $this->belongsTo('App\Artist');
    }
}

RUN MIGRATION
vagrant ssh
php artisan migrate

UPDATING TABLES
vagrant ssh
php artisan make:migration adding_profile_image_to_artists
ADDING COLUMN
public function up()
{
    Schema::table('artists', function (Blueprint $table) {
        $table->string('profile_image');
    });
}
DROPPING COLUMN
public function down()
{
    Schema::table('artists', function (Blueprint $table) {
        $table->dropColumn('profile_image');
    });
}

php artisan migrate


FORMS & HTML
https://laravelcollective.com/docs/6.0/html
composer update
composer require laravelcollective/html

FILE STORAGE
The public disk is intended for files that are going to be publicly accessible. By default, the public disk uses the local driver and stores these files in storage/app/public. To make them accessible from the web, you should create a symbolic link from public/storage to storage/app/public. This convention will keep your publicly accessible files in one directory that can be easily shared across deployments
 
php artisan storage:link

ROUTE CACHING
Closure based routes cannot be cached. To use route caching, you must convert any Closure routes to controller classes.
If your application is exclusively using controller based routes, you should take advantage of Laravel's route cache. Using the route cache will drastically decrease the amount of time it takes to register all of your application's routes. In some cases, your route registration may even be up to 100x faster. To generate a route cache, just execute the route:cache Artisan command:

php artisan route:cache
After running this command, your cached routes file will be loaded on every request. Remember, if you add any new routes you will need to generate a fresh route cache. Because of this, you should only run the route:cache command during your project's deployment.

You may use the route:clear command to clear the route cache:

php artisan route:clear


NGINX FILE UPLOAD SIZE
https://stackoverflow.com/questions/58811513/413-request-entity-too-large-nginx-server-in-laravel-homestead-for-windows


DEPLOY TO HEROKU
create Procfile (insert web: vendor/bin/heroku)
heroku create
https://stackoverflow.com/questions/14161098/whats-the-correct-way-to-rename-a-heroku-app
git push heroku master
